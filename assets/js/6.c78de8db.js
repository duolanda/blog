(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1e3:function(t,s,a){t.exports=a.p+"assets/img/1675248631832-e59e6230-8c51-4462-8da9-c494e10a21e7.f3df37b4.png"},1001:function(t,s,a){t.exports=a.p+"assets/img/1675328031125-95ec9d17-d614-4dff-97fb-d743e4565425.bbdf6988.png"},1002:function(t,s,a){t.exports=a.p+"assets/img/1675328416772-d5083031-a91b-4f7b-b253-4e8dc7407023.74067d28.png"},1003:function(t,s,a){t.exports=a.p+"assets/img/1675329044792-6ce19f24-ffcd-4f01-95c9-3ebd0b67fe3d.0358cabd.png"},1004:function(t,s,a){t.exports=a.p+"assets/img/1675329563714-daaa0cb3-1d4e-4498-96c1-f40dd1e02502.f9e41e43.png"},1005:function(t,s,a){t.exports=a.p+"assets/img/1675329958614-05ec3946-6037-4eeb-80ca-6b918b6a7ca8.45e4641e.png"},1006:function(t,s,a){t.exports=a.p+"assets/img/1675331017912-a8997d57-8947-47bc-9dd5-e4b88e3c1d89.e447e719.png"},1007:function(t,s,a){t.exports=a.p+"assets/img/1675331046310-1ef102ff-723e-4cfe-a0ab-45cf92b78d2d.0f4a93d6.png"},1008:function(t,s,a){t.exports=a.p+"assets/img/1675331086624-0ca566a2-e58f-4a00-ad3e-9eb2776ab42b.524901d1.png"},1009:function(t,s,a){t.exports=a.p+"assets/img/1675335555538-c958e4f3-cf3f-4a0a-a8ae-f375d187216c.a981ffb9.png"},1010:function(t,s,a){t.exports=a.p+"assets/img/1675252082740-2d42c473-7ee0-4149-9707-37632b562fa1.240ecb75.png"},1011:function(t,s,a){t.exports=a.p+"assets/img/1675253507079-4ffc7071-724a-4a32-898c-ce30f6630d44.1ee491da.png"},1012:function(t,s,a){t.exports=a.p+"assets/img/1675256093243-bf9d3c31-86e6-49a5-bcc5-7ceb03f92d0b.bc53698f.png"},1013:function(t,s,a){t.exports=a.p+"assets/img/1675257159948-3947fd22-b254-4f24-a21b-5a508a6092fb.969271cf.png"},1014:function(t,s,a){t.exports=a.p+"assets/img/1675257490982-02bcee2e-3b30-463d-ade5-b800d156c86f.caac5f3a.png"},1015:function(t,s,a){t.exports=a.p+"assets/img/1675316919444-c58c5a45-77fb-4dbf-b36a-a798e0f01e79.987b7c23.png"},1016:function(t,s,a){t.exports=a.p+"assets/img/1675321059407-4dccde7b-86d3-41ba-9c58-5fa44f6bb09d.0406eb8f.png"},1017:function(t,s,a){t.exports=a.p+"assets/img/1675321467031-ee892b92-0e9b-434e-946d-e9fcdb75f820.2befafdc.png"},1018:function(t,s,a){t.exports=a.p+"assets/img/1675321992225-cc667834-4c22-4930-a421-4bc5938efdd7.37083193.png"},1019:function(t,s,a){t.exports=a.p+"assets/img/1675322246583-0de700ae-438d-424d-85c4-5b947cfa5973.9232e4d8.png"},1020:function(t,s,a){t.exports=a.p+"assets/img/1675323020354-38f7e79e-c71d-4d11-a969-4a8b678d867c.1f87074c.png"},1021:function(t,s,a){t.exports=a.p+"assets/img/1675323483162-d4d1b9ee-6576-44e9-b753-134b734cdc79.fa0c9d59.png"},1022:function(t,s,a){t.exports=a.p+"assets/img/1675323860876-ff13f6f4-be85-48b5-a889-5a9f574ac453.9dfb3f9f.png"},1023:function(t,s,a){t.exports=a.p+"assets/img/1675324960240-7f16828e-f695-4664-b025-e121204533a7.33f9adfa.png"},1024:function(t,s,a){t.exports=a.p+"assets/img/1675325585255-54d462f9-23ba-4a06-9d6b-04b02d4ea8a8.a059cea1.png"},1025:function(t,s,a){t.exports=a.p+"assets/img/1675326010577-b6bda992-ebf9-473e-b452-bae11cc40c52.3d447075.png"},1026:function(t,s,a){t.exports=a.p+"assets/img/1675326382992-c32f941f-18e6-4232-be3c-82e514856102.bdf2c1ca.png"},1027:function(t,s,a){t.exports=a.p+"assets/img/1675326706849-6d1716cb-750c-456a-9d48-f2eb4de36178.b0745c20.png"},1028:function(t,s,a){t.exports=a.p+"assets/img/1675326854475-162d9ea2-ee33-4ec7-8111-4de32634927b.1222021d.png"},1029:function(t,s,a){t.exports=a.p+"assets/img/1675327503341-5dc79dfd-432b-49a2-bde1-0154b64f9307.4c3de514.png"},1030:function(t,s,a){t.exports=a.p+"assets/img/1675336508778-f78fb569-ae7f-4ef9-8326-c77ab2949f78.025f35d3.png"},1031:function(t,s,a){t.exports=a.p+"assets/img/1675336521714-905d0397-222a-4088-b7ba-92cd27816228.ad7b185b.png"},1032:function(t,s,a){t.exports=a.p+"assets/img/1675336531671-ea610838-31b0-41d4-84b2-24436db0bffe.0ef9e383.png"},1033:function(t,s,a){t.exports=a.p+"assets/img/1675338005401-ca8e84c7-2dd8-4acb-a675-ed0fac5050b1.c12a1c3b.png"},1034:function(t,s,a){t.exports=a.p+"assets/img/1675338640818-9070a896-1f26-4445-ad28-c495a94ecf48.67640df8.png"},1035:function(t,s,a){t.exports=a.p+"assets/img/1675338717754-6e55e3ed-b336-4a37-8285-d6b10ca6de37.eb424d44.png"},1036:function(t,s,a){t.exports=a.p+"assets/img/1675338691621-924b66f2-8c49-445d-9390-0ab91d1c23cb.d9b26eb2.png"},1037:function(t,s,a){t.exports=a.p+"assets/img/1675339068008-3c27e601-d02f-4ae7-ad46-1956d886bd48.42163a64.png"},1038:function(t,s,a){t.exports=a.p+"assets/img/1675339599857-f6dc8fea-c93d-4ebc-9828-60678b152dc9.10da3bfb.png"},1039:function(t,s,a){t.exports=a.p+"assets/img/1675340094588-15343059-6078-453e-973e-a72c02e6c114.e911eeb0.png"},1040:function(t,s,a){t.exports=a.p+"assets/img/1675340934649-73f1aec1-e351-4d32-876f-a8c5aca8a35f.21b682af.png"},1041:function(t,s,a){t.exports=a.p+"assets/img/1675341165919-c0dedabd-140c-4c77-9b3c-c80ec1dd61ed.b247ae7c.png"},1042:function(t,s,a){t.exports=a.p+"assets/img/1675343096756-5ea5cf63-c958-4a07-87ca-07cfc948d4c2.c1cae049.png"},1043:function(t,s,a){t.exports=a.p+"assets/img/1675343969060-3d41bed5-ed62-45fa-987a-9db5c72ba5f8.6ee4dfb6.png"},1044:function(t,s,a){t.exports=a.p+"assets/img/1675343991464-84fcd131-94bc-4ecd-a0aa-bb51c48d656b.5634a0ff.png"},1045:function(t,s,a){t.exports=a.p+"assets/img/1675344329686-86aa8b27-54c0-4db4-aeb8-fbd90cb5bd16.e9658c8c.png"},1046:function(t,s,a){t.exports=a.p+"assets/img/1675344460987-b8cd1cab-bd26-4fec-b020-4fa4e40c680a.18a142d9.png"},1047:function(t,s,a){t.exports=a.p+"assets/img/1675344497334-da88fc7c-5134-4e97-b16b-d5b87aced462.92d196ce.png"},1048:function(t,s,a){t.exports=a.p+"assets/img/1675344602782-585b8847-7c0e-43e1-84d1-03505de0c6cb.dcd3a127.png"},1049:function(t,s,a){t.exports=a.p+"assets/img/1675344877362-e70da5dd-b1a4-4b17-a521-3f45f637e2fd.f5b3c286.png"},1050:function(t,s,a){t.exports=a.p+"assets/img/1675344970377-b458310b-3378-4d47-8380-ecad655e5a90.64429463.png"},1051:function(t,s,a){t.exports=a.p+"assets/img/1675345010057-559b36b4-0a17-4a26-8ee7-a916c0f169ca.e60416e1.png"},1052:function(t,s,a){t.exports=a.p+"assets/img/1675345524187-9cde5fad-170d-4132-bb85-4cca8311bd1f.cdb01996.png"},1053:function(t,s,a){t.exports=a.p+"assets/img/1675345536697-b4e952a3-03cb-41de-a0da-457bd4182089.c645b6e3.png"},1054:function(t,s,a){t.exports=a.p+"assets/img/1675345545149-d6b4188f-7c0d-4a87-b378-81e13405a472.77baa867.png"},1122:function(t,s,a){"use strict";a.r(s);var n=a(11),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_1-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1.概述")]),t._v(" "),n("p",[t._v("包括语言和标准库两个部分")]),t._v(" "),n("h2",{attrs:{id:"_1-1-演化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-演化"}},[t._v("#")]),t._v(" 1.1 演化")]),t._v(" "),n("ul",[n("li",[t._v("C++ 98（1.0）")]),t._v(" "),n("li",[t._v("C++ 03（TR1，Technical Report 1）")]),t._v(" "),n("li",[t._v("C++ 11（2.0）")]),t._v(" "),n("li",[t._v("C++ 14")])]),t._v(" "),n("h2",{attrs:{id:"_1-2-header-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-header-files"}},[t._v("#")]),t._v(" 1.2 Header files")]),t._v(" "),n("p",[t._v("C++ 2.0新特性包括语言和标准库两个层面，后者以 header files 形式呈现")]),t._v(" "),n("ul",[n("li",[t._v("C++ 标准库的 header files 不带扩展名（.h），例如"),n("code",[t._v("#include <vector>")])]),t._v(" "),n("li",[t._v("新式 C header files 不带副名称 .h，例如"),n("code",[t._v("#include <cstdio>")])]),t._v(" "),n("li",[t._v("旧式 C header files（带有副名称.h）仍可用，例如"),n("code",[t._v("#include <stdio.h>")])])]),t._v(" "),n("p",[t._v("曾经在 std::tr1 命名空间下的东西现在也都放到 std 里了，所以直接"),n("code",[t._v("using namespace std;")]),t._v("即可")]),t._v(" "),n("h2",{attrs:{id:"_1-3-重点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-重点"}},[t._v("#")]),t._v(" 1.3 重点")]),t._v(" "),n("p",[t._v("语言：")]),t._v(" "),n("ul",[n("li",[t._v("Variadic Templates")]),t._v(" "),n("li",[n("strong",[t._v("move")]),t._v(" Semantics")]),t._v(" "),n("li",[n("strong",[t._v("auto")])]),t._v(" "),n("li",[t._v("Range-base "),n("strong",[t._v("for")]),t._v(" loop")]),t._v(" "),n("li",[t._v("Initializer list")]),t._v(" "),n("li",[t._v("Lambdas")]),t._v(" "),n("li",[t._v("……")])]),t._v(" "),n("p",[t._v("标准库：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("type_traits")])]),t._v(" "),n("li",[t._v("Unordered 容器")]),t._v(" "),n("li",[n("strong",[t._v("forward_list")])]),t._v(" "),n("li",[n("strong",[t._v("array")])]),t._v(" "),n("li",[n("strong",[t._v("tuple")])]),t._v(" "),n("li",[t._v("Con-currency")]),t._v(" "),n("li",[t._v("RegEx")]),t._v(" "),n("li",[t._v("……")])]),t._v(" "),n("h1",{attrs:{id:"_2-variadic-templates-可变参数模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-variadic-templates-可变参数模板"}},[t._v("#")]),t._v(" 2.Variadic Templates（可变参数模板）")]),t._v(" "),n("p",[t._v("模板的进化堪比原子弹")]),t._v(" "),n("h2",{attrs:{id:"_2-1-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-概述"}},[t._v("#")]),t._v(" 2.1 概述")]),t._v(" "),n("p",[t._v("模板 Templates：")]),t._v(" "),n("ul",[n("li",[t._v("函数模板")]),t._v(" "),n("li",[t._v("类模板")])]),t._v(" "),n("p",[t._v("变化的是模板参数：")]),t._v(" "),n("ul",[n("li",[t._v("参数个数：利用参数个数逐一递减的特性，实现递归函数的调用，使用"),n("strong",[t._v("函数模板")]),t._v("完成")]),t._v(" "),n("li",[t._v("参数类型：利用参数个数逐一递减以致参数类型也逐一递减的特性，实现递归继承或递归复合，以"),n("strong",[t._v("类模板")]),t._v("完成")])]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" Types"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里的...是关键字的一部分：模板参数包")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" firstArg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Types"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里的...要写在自定义类型Types后面：函数参数类型包")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" firstArg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里的...要写在变量args后面：函数参数包")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("ul",[n("li",[t._v("参数的个数任意，参数的类型也任意")]),t._v(" "),n("li",[t._v("传进来的参数会被分成一个和一包，如"),n("code",[t._v('print(7.5, "hello", bitset<16>(377), 42);')]),t._v("7.5 就是“一个”，后面的参数是“一包”，一个由 cout 输出，一包再递归处理。等一包里面内容为 0 时，就不能再调用这个函数了，所以上面又写了一个空参数的 print")]),t._v(" "),n("li",[t._v("注意例子中"),n("code",[t._v("...")]),t._v("的位置，都是语法规则")]),t._v(" "),n("li",[t._v("在可变模板参数内部可以使用"),n("code",[t._v("sizeof...(args)")]),t._v("得到实参的个数（即一包里面有多少个东西）")])]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" Types"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Types"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*......*/")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("ul",[n("li",[t._v("如果还有这个，看起来会不能共存，因为有歧义，但其实可以")]),t._v(" "),n("li",[t._v("后面会讲两个谁是泛化，谁是特化")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(999),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("hash 函数递归调用的例子")]),t._v(" "),n("li",[n("code",[t._v("hash_val(c.fname, c.lname, c.no);")]),t._v("的第一个参数不是"),n("code",[t._v("size_t")]),t._v("类型，所以会调用到 ①。① 给参数加上一个 seed 参数后传给 ②。② 先对 seed 调用 ④，再继续调用 seed 和参数，每次 ② 都会把参数拆成 1 个和多个，如果参数依然还剩多个就递归调用自己，只剩一个参数的话就调用 ③。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1e3),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("tuple 递归继承的例子")]),t._v(" "),n("li",[t._v("关键在于"),n("code",[t._v("private tuple<Tail...>")]),t._v("，继承了那一包，然后再不停往上继承，最后继承自"),n("code",[t._v("tuple<>")])])]),t._v(" "),n("h2",{attrs:{id:"_2-2-七大例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-七大例子"}},[t._v("#")]),t._v(" 2.2 七大例子")]),t._v(" "),n("p",[t._v("在课程顺序上，这部分在 18 之后")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1001),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("用一个模板函数接收各种各样的参数")]),t._v(" "),n("li",[t._v("① 和 ③ 可以共存，因为 ① 更特化，但其实共存的时候 ③ 永远不会被调用。哪怕只剩 1 个了，也会调用 1+0 个，而不是 1 个。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1002),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("使用 variadic templates 模拟 C 的 printf()")]),t._v(" "),n("li",[t._v("其实输出时没用到 %d 这些符号，直接往 cout 里丢，这几个 % 符号的作用主要是检查是不是数量相等，不相等就抛出异常")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1003),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("可以接收任意参数的 max 函数，并没有用 variadic templates  而是用 initializer lists，放在这里的意思是，如果参数数量不限，但类型不一样，完全可以用 initializer lists")]),t._v(" "),n("li",[t._v("从右上角开始看")]),t._v(" "),n("li",[t._v("左侧箭头画错了，起点应该是下面的"),n("code",[t._v("__max_element")])]),t._v(" "),n("li",[t._v("_Iter_less_iter 是仿函数，用"),n("code",[t._v("<")]),t._v("比大小")]),t._v(" "),n("li",[t._v("左侧 while 一个个比大小")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1004),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("例 3 的改版，不再需要大括号")]),t._v(" "),n("li",[t._v("上面的蓝色箭头画错了，应该指向下面的"),n("code",[t._v("maximum()")])]),t._v(" "),n("li",[t._v("不断调用"),n("code",[t._v("std::max()")]),t._v("获取最大值")]),t._v(" "),n("li",[t._v("当然，就像例 3 展示的，"),n("code",[t._v("std::max()")]),t._v("本来就可以接收任意数量的参数，只不过要加大括号")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1005),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("用类模板把模板参数一个个分解")]),t._v(" "),n("li",[t._v("我希望输出时对头尾元素做特殊操作，输出之后，前后会有中括号，中间用逗号间隔开。所以必须要知道当前处理的元素总共有几个（"),n("code",[t._v("sizeof...()")]),t._v("），以及现在处理的是第几个（通过 IDX 记录）")]),t._v(" "),n("li",[t._v("通过  IDX+1 与 MAX 比较判断是不是最后一个，如果是就不额外打印东西了，如果不是就额外打印逗号。最后一个处理完了会进入到最下面的偏特化版本，什么都不做")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1006),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("tuple。前面都是递归调用、递归创建，而这个是递归继承")]),t._v(" "),n("li",[t._v("递归继承，处理的是类型，要用类模板")]),t._v(" "),n("li",[t._v("“一个”拿来声明变量，“一包”再做成 tuple 被继承，非常巧妙")]),t._v(" "),n("li",[t._v("tail() 返回的是指针")]),t._v(" "),n("li",[n("code",[t._v("tuple(Head v, Tail... vtail):m_head(v), inherited(vtail...){}")]),t._v("的"),n("code",[t._v("inherited(vtail...)")]),t._v("其实是调用父类构造函数完成初值设定")]),t._v(" "),n("li",[t._v("但是"),n("code",[t._v("typename Head::type head() {return m_head;}")]),t._v("这行会报错，因为 int 和 float 都回答不了 type")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1007),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("为了编译通过，想到可以用"),n("code",[t._v("decltype")]),t._v("得到 m_head 的 type")]),t._v(" "),n("li",[t._v("又遇到了一个问题，此时 m_head 还没有出现，编译依然不通过，于是把 protect 挪上来")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1008),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("后来发现其实是多此一举，刚才想的太复杂了")]),t._v(" "),n("li",[t._v("其实根本不用问类型，就是 Head")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1009),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("既然可以递归继承，那么也可以递归复合，模仿例 6 用复合实现 tuple")])]),t._v(" "),n("h1",{attrs:{id:"_3-模板表达式中的空格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-模板表达式中的空格"}},[t._v("#")]),t._v(" 3.模板表达式中的空格")]),t._v(" "),n("p",[t._v("如果模板参数本身也是模板，尖括号之间必须要有空格："),n("code",[t._v("vector<list<int> >;")]),t._v("\n自 C++11 之后开始就可以去掉空格了："),n("code",[t._v("vector<list<int>>;")])]),t._v(" "),n("h1",{attrs:{id:"_4-nullptr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-nullptr"}},[t._v("#")]),t._v(" 4.nullptr")]),t._v(" "),n("p",[t._v("标准库允许使用 nullptr 取代 0 或者 NULL 来对指针赋值（其实 NULL 就是 0）")]),t._v(" "),n("ul",[n("li",[t._v("nullptr 是个新关键字")]),t._v(" "),n("li",[t._v("nullptr 可以被自动转换为各种 pointer 类型，但不会被转换为任何整数类型")]),t._v(" "),n("li",[t._v("nullptr 的类型为 std::nullptr_t，定义于头文件中")])]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 f(int).")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为定义 NULL 为 0，所以调用 f(int)，如果没有定义为 0，会产生二义性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 f(void*).")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h1",{attrs:{id:"_5-auto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-auto"}},[t._v("#")]),t._v(" 5.auto")]),t._v(" "),n("p",[t._v("auto 可以进行自动类型推导\n注意，在 C 的语境下，auto 意味着局部变量，也叫 local 变量（因为函数结束后局部变量会自动消失）\n使用 auto 的场景：类型太长（迭代器）或者类型太复杂（lambda）")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" pos "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代替 vector<string>::iterator")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// l 代表了 lambda")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("一种写法简化")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("list"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("ist"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("iterator ite"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nite "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//现在可写为")]),t._v("\nlist"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" ite "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h1",{attrs:{id:"_6-uniform-initialization-一致性初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-uniform-initialization-一致性初始化"}},[t._v("#")]),t._v(" 6.uniform initialization（一致性初始化）")]),t._v(" "),n("p",[t._v("C++11 之前初始化时存在多个版本"),n("code",[t._v("{}``()``=")]),t._v("。让使用者使用时比较混乱")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("Rect r1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("area"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("print"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nRect "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("r1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ia"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("210")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("47")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("109")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("C++11 提供一种万用的初始化方法，任何初始化都可以使用大括号"),n("code",[t._v("{}")])]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cities "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Berlin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New York"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"London"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Braunschweig"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cairo”,"')]),t._v('Cologne"\n'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncomplex"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于 c(4.0,3.0) ")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("只要变量名后接大括号就是初始化")]),t._v(" "),n("p",[t._v("原理解析：当编译器看到大括号包起来的东西"),n("code",[t._v("{t1,t2...tn}")]),t._v("时，会生成一个"),n("code",[t._v("initializer_list<T>")]),t._v("，"),n("code",[t._v("initializer_list")]),t._v("关联至一个"),n("code",[t._v("array<T,n>")]),t._v("。调用函数（例如构造函数 ctor）时该 array 内的元素可被编译器分解逐一传给函数。\n如"),n("code",[t._v('vector<string> cities {"Berlin","New York","London","Braunschweig","Cairo”,"Cologne"};')]),t._v("形成一个"),n("code",[t._v("initializer_list<string>")]),t._v("，背后有"),n("code",[t._v("array<string,6>")]),t._v("。调用"),n("code",[t._v("vector<string>")]),t._v("ctors 时编译器找到了一个"),n("code",[t._v("vector<string>")]),t._v(" ctor 接受 "),n("code",[t._v("initializer_list<string>")]),t._v("。\n"),n("code",[t._v("complex<double> c{4.0, 3.0};")]),t._v("形成一个"),n("code",[t._v("initializer_list<double>")]),t._v("，背后有"),n("code",[t._v("array<double,2>")]),t._v("。因为"),n("code",[t._v("complex<double>")]),t._v("并无任何 ctor 接受"),n("code",[t._v("initializer_list<double>")]),t._v("，所以调用"),n("code",[t._v("complex<double>")]),t._v(" ctor 时该 array 内的 2 个元素被分解后传给 ctor。\n但是如果调用函数自身提供了"),n("code",[t._v("initializer_list<T>")]),t._v("参数类型的构造函数，则不会分解而是直接传过去。直接整包传入进行初始化。所有的容器都可以接受这样的参数。")]),t._v(" "),n("h1",{attrs:{id:"_7-initializer-lists"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-initializer-lists"}},[t._v("#")]),t._v(" 7.Initializer Lists")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 未初始化")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j 初始化为 0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 未初始化")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// q 初始化为 nullptr")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("大括号里面的内容不能窄化转换（narrowing conversion）")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("x1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这俩可以，但会转换为 5")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这俩会报错，因为大括号不能窄化转换")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("虽然文档上如此描述，但在实际测试当中，只会警告，不会报错")]),t._v(" "),n("p",[t._v("initializer_list 用来接收任意数量的东西"),n("code",[t._v("{12,3,5,7,11,13,17}")]),t._v("会自动被编译器当做"),n("code",[t._v("std::initializer_list<int>")]),t._v("。initializer_list"),n("T",[t._v("是一个class（类模板），虽然数量任意，但类型要一致。")])],1),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("initializer_list"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \nstd"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[n("img",{attrs:{src:a(1010),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("p 是小括号，调用版本1；q 是大括号，调用版本 2（不要被箭头误导了，箭头指的是 complex 的情况）；r 和 s 也都是一包，调用版本 2。")]),t._v(" "),n("li",[t._v("如果没有 2，只有 1，p、q 和 s 会调用版本 1，但是 r 不行，因为 r 有三个参数，")]),t._v(" "),n("li",[t._v("联系前面的例子，complex"),n("double",[t._v(" 就相当于没有版本 2，于是会调用到 1")])],1),t._v(" "),n("li",[t._v("图右为 initializer_list 源码\n"),n("ul",[n("li",[t._v("initializer_list"),n("T",[t._v(" 背后有 array 数组支撑，initializer_list 关联一个 array<T,n>")])],1),t._v(" "),n("li",[t._v("initializer_list"),n("T",[t._v(" 只包含一个指向 array 的指针，而不是内含整个 array，它的拷贝只是一个浅拷贝，比较危险，两个指针指向同一个内存")])],1)])])]),t._v(" "),n("p",[t._v("根据源码检索，STL 的许多地方都用到了 initializer_list")]),t._v(" "),n("ul",[n("li",[t._v("所有容器都接受指定任意数量的值用于构造或赋值或者 insert() 或 assign()")]),t._v(" "),n("li",[t._v("算法 max() 和 min() 也接受任意参数")])]),t._v(" "),n("h1",{attrs:{id:"_8-explict"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-explict"}},[t._v("#")]),t._v(" 8.explict")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1011),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("C++11 之前的 explicit")]),t._v(" "),n("li",[t._v("左侧成立，相加时编译器发现 5 可以完成转换，变成 5+0i")]),t._v(" "),n("li",[t._v("如果你不想编译器完成这样的隐式转换，就加上 explicit，右侧会报错"),n("code",[t._v("[Error] no match for 'operator+'(operand types are 'Complex' and 'int'")])]),t._v(" "),n("li",[t._v("但是 C++11 之前，只有非 explicit 的一个实参（one argument）的构造函数才会做隐式转换，而 C++11 开始多个实参也可以隐式转换了，所以 explicit 也支持多个参数的构造函数了")])]),t._v(" "),n("p",[t._v("示例：")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("P")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tcout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"P(int a, int b) \\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initializer_list"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tcout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"P(initializer_list<int>) \\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explicit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"explicit P(int a, int b, int c) \\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" P"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br")])]),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("P "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("p1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//P(int a, int b)")]),t._v("\nP p2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//P(initializer_list<int>)")]),t._v("\nP p3 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//P(initializer_list<int>)")]),t._v("\nP p4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//P(initializer_list<int>)")]),t._v("\nP p5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[Error] converting to 'P' from initializer list would use explicit constructor")]),t._v("\np "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("p6")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//explict P(int a, int b, int c)")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h1",{attrs:{id:"_9-range-based-for-statement-基于范围的-for-循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-range-based-for-statement-基于范围的-for-循环"}},[t._v("#")]),t._v(" 9.range-based for statement（基于范围的 for 循环）")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例子")]),t._v("\nvector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" elem"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("elem"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" elem"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    elem "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("ul",[n("li",[t._v("其实就是利用迭代器遍历了一遍")])]),t._v(" "),n("p",[t._v("基于范围的 for 循环遇到类型不同时会做转换，如果之前用 explicit 禁止了转换，那么将会报错。")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explicit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("C")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nvector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" C"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" elem "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" vs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ERROR, no conversion from string to C defined")]),t._v("\ncout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" elem "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" endl；\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("h1",{attrs:{id:"_10-default-delete"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-default-delete"}},[t._v("#")]),t._v(" 10.= default, = delete")]),t._v(" "),n("p",[t._v("哪怕一个类是空的，C++ 也会给它默认的构造函数、拷贝构造、拷贝赋值、移动构造、移动赋值、析构函数\n如果已经自行定义了构造函数，那么编译器不会再给你默认的构造函数，可是如果加上"),n("code",[t._v("=default")]),t._v("，就可以重新获得并使用默认构造函数。"),n("code",[t._v("=delete")]),t._v("则相反，意味着这个函数已经删除，不能再被使用。引进这两种新特性的目的是为了增强对“类默认函数的控制”，从而让程序员更加精准地去控制默认版本的函数。")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zoo")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Zoo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("d1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("d2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Zoo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Zoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拷贝构造 copy constructor")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Zoo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Zoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//移动构造 move constructor")]),t._v("\n    Zoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Zoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拷贝赋值 copy assignment")]),t._v("\n    Zoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Zoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//移动赋值 move assignment")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Zoo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("ul",[n("li",[t._v("构造函数、拷贝构造、拷贝赋值称为 big three，再加上移动构造和移动赋值是 big five")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1012),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("我已经有一个构造函数了，默认的我也要，没问题，多个构造函数可以共存")]),t._v(" "),n("li",[t._v("我已经写了拷贝构造，不能再"),n("code",[t._v("=default")]),t._v("了，因为拷贝构造只能有一个。"),n("code",[t._v("=delete")]),t._v("也不可以，既然已经写出来了又要 delete，那么编译器要何去何从呢？所以不行")]),t._v(" "),n("li",[t._v("拷贝赋值同理，也只能有一个")]),t._v(" "),n("li",[n("code",[t._v("func1()")]),t._v("和"),n("code",[t._v("func2()")]),t._v("是两个一般的函数。一般函数并没有"),n("code",[t._v("=default")]),t._v("版本，所以编译会报错，但是"),n("code",[t._v("=delete")]),t._v("没问题。不过这种用法其实挺少的，因为一般不想要哪个函数一开始就不写就好了")]),t._v(" "),n("li",[t._v("析构函数先"),n("code",[t._v("=delete")]),t._v("再"),n("code",[t._v("=default")]),t._v("也会报错，编译器搞不清你的意图")]),t._v(" "),n("li",[t._v("补充：如果不想在某个类定义虚函数，可以加"),n("code",[t._v("=0")]),t._v("，代表纯虚函数。但"),n("code",[t._v("=0")]),t._v("只能用在虚函数上")])]),t._v(" "),n("p",[t._v("什么样的类需要自己定义这些函数，而什么样的类用默认的就可以了呢？")]),t._v(" "),n("ul",[n("li",[t._v("如果类中带有 pointer member（指针成员），那我们就可以断定必须要自己写出 big five；\n如果不带，绝大多数情况下就不必给出 big five。")]),t._v(" "),n("li",[t._v("复数类中没有指针，拷贝就是把实部、虚部都拷贝过去即可，编译器默认给的也是这么做的")]),t._v(" "),n("li",[t._v("字符串中有指针，涉及到浅拷贝和深拷贝的问题，所以必须要自己写出 big five")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1013),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("根据"),n("code",[t._v("=default")]),t._v("和"),n("code",[t._v("=delete")]),t._v("写出这三个特别的类")]),t._v(" "),n("li",[t._v("NoCopy 不允许拷贝，所以把拷贝构造和拷贝赋值都"),n("code",[t._v("=delete")]),t._v("了")]),t._v(" "),n("li",[t._v("NoDtor 删除了析构函数，这么做一定要考虑后果，对象离开作用域或消除时都会报错")]),t._v(" "),n("li",[t._v("PrivateCopy 不允许一般的代码拷贝，但是可以被友元或成员拷贝")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1014),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("boost 就使用了类似的手法")]),t._v(" "),n("li",[t._v("它也把拷贝构造和拷贝赋值都放到 private 里了，如此设计是为了让其他的类来继承，继承之后也会具有这样的性质")])]),t._v(" "),n("h1",{attrs:{id:"_11-alias-template-模板别名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-alias-template-模板别名"}},[t._v("#")]),t._v(" 11.Alias Template（模板别名）")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" Vec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyAlloc"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用")]),t._v("\nVec"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" coll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于 std::vector<int, MyAlloc<int>> coll;")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("使用宏无法达到相同的效果")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("Vec")]),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyAlloc"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n\nVec"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" coll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyAlloc"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" coll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//牛头不对马嘴")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("typedef 同样也不行，因为 typedef 无法制定参数")]),t._v(" "),n("p",[t._v("Alias Template 无法特化（偏特化和全特化都不行）。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1015),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("我希望写一个测试函数，可以传入任意的容器和类型")]),t._v(" "),n("li",[t._v("左侧就是天方夜谭，因为函数传入的参数都是对象，这里却想拿 cntr 的参数类型做构造")]),t._v(" "),n("li",[t._v("右侧就是传东西了（list()是个临时对象），然后用函数模板取出类型，但依然是天方夜谭，因为 Container 不是模板")])]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Container")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Container c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("iterator_traits")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Container")]),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("iterator"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("value_type Valtype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Valtype")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("output_static_data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Container"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Container"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    c1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("test "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("list")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyString"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntest "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("list")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyStrNoMov"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntest "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vector")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyString"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntest "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vector")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyStrNoMow"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntest "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deque")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyString"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntest "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("moveable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deque")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyStrNoMove"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("ul",[n("li",[t._v("只好牺牲调用端的弹性，在调用端就把容器和类型结合起来")]),t._v(" "),n("li",[t._v("因为传入的是结合后的，代码里必须要把元素类型取出来，通过把容器的迭代器丢到萃取机里得到元素类型，并重命名为 Valtype")]),t._v(" "),n("li",[t._v("这样的写法并不差，但没有达到最初想要的效果。而且，如果容器没有迭代器或 traits 呢（当然标准库里的容器肯定都有）。该如何做到能接受一个模板参数 Container，而 Container 本身又是个模板，并从中取出 Container 的模板参数？如收到 vector"),n("string",[t._v("，如何取出元素类型 string？")])],1)]),t._v(" "),n("p",[t._v("下面用 template template parameter（模板模板参数）解决这个问题")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//T 可写可不写，默认是前面的 T")]),t._v("\n              "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Container")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XCls")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    Container"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCls")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("output_static_data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Container"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Container"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用时会报错")]),t._v("\nXCls"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[Error] vector的实际类型和模板中的Container<T>类型不匹配")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br")])]),n("ul",[n("li",[n("code",[t._v("template <class> class Container")]),t._v("是外面模板的模板参数，而它自己本身也是一个模板")]),t._v(" "),n("li",[t._v("XCls 这个名字是随便取的，意思是 X Class")]),t._v(" "),n("li",[t._v("代码本身编译通过了，但加上使用的代码后报错了，因为 vector 是有两个参数的（元素类型和分配器），但代码里"),n("code",[t._v("Container<T> c;")]),t._v("只写了一个。平时写的时候因为分配器这个参数有默认值所以只需要写一个，但现在作为模板模板参数，编译器无法推导")]),t._v(" "),n("li",[t._v("这时就引入我们的主题了：Alias Template")])]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" Vec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allocator"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nXCls"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Vec"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("上面的代码都不变，在外部加上这三行，Vec 只需要一个参数就够了，与"),n("code",[t._v("Container<T> c;")]),t._v("相匹配，达到我们的目标\n可见 Alias Template 并非只是让我们少写几行代码，而是有更丰富的作用")]),t._v(" "),n("h1",{attrs:{id:"_12-type-alias"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-type-alias"}},[t._v("#")]),t._v(" 12.Type Alias")]),t._v(" "),n("p",[t._v("类似 typedef，同样借助 using 关键字来使用")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" func "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfunc fn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("func 是一个类型，typedef 的语法并不能很好的表达这一点，Type Alias 就清晰多了\nType Alias 和 typedef 完全等价")]),t._v(" "),n("h1",{attrs:{id:"_13-using-用法总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-using-用法总结"}},[t._v("#")]),t._v(" 13.using 用法总结")]),t._v(" "),n("ol",[n("li",[t._v("打开命名空间（"),n("code",[t._v("using namespace std")]),t._v("）或者命名空间（"),n("code",[t._v("using std::cout")]),t._v("）的成员")]),t._v(" "),n("li",[t._v("打开类的成员（"),n("code",[t._v("using _Base::_M_allocate;")]),t._v("，这样以后只需写 _M_allocate，编译器便会到 _Base 类里去找）")]),t._v(" "),n("li",[t._v("类型别名和模板别名（C++ 11开始支持）")])]),t._v(" "),n("h1",{attrs:{id:"_14-noexcept"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-noexcept"}},[t._v("#")]),t._v(" 14.noexcept")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1016),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("在函数后面加上"),n("code",[t._v("noexpect")]),t._v("关键字，保证这个函数不会丢出异常，后面可以在小括号里面写上不会丢出异常的限定条件，"),n("code",[t._v("noexpect")]),t._v("就相当于"),n("code",[t._v("noexpect(true)")])]),t._v(" "),n("li",[n("strong",[t._v("一般异常处理流程")]),t._v("：当程序发生异常时会将异常信息上报返回给调用者，如果有异常处理则处理，如果该调用者没有处理异常则会接着上报上一层，若到了最上层都没有处理，就会调用"),n("code",[t._v("std::terminate()")]),t._v("调用"),n("code",[t._v("std::abort()")]),t._v("，然后终止程序")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1017),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("一定要给移动构造和移动赋值加上"),n("code",[t._v("noexpect")]),t._v("，vector 才会用它")]),t._v(" "),n("li",[t._v("但实际写的时候不知道其他人会用什么，所以最好有移动构造和移动赋值就写上"),n("code",[t._v("noexpect")])])]),t._v(" "),n("h1",{attrs:{id:"_15-override"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-override"}},[t._v("#")]),t._v(" 15.override")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1018),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[n("code",[t._v("override")]),t._v("应用在虚函数上，告诉编译器这个函数就是要重写父类虚函数，让编译器帮忙检查")]),t._v(" "),n("li",[t._v("上面框中，子类本来想重写父类的函数，结果写错了，编译器会认为这是子类的新函数")]),t._v(" "),n("li",[t._v("下面框中，在子类后面加上"),n("code",[t._v("override")]),t._v("，编译器会报错，告诉你写错了")])]),t._v(" "),n("h1",{attrs:{id:"_16-final"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-final"}},[t._v("#")]),t._v(" 16.final")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1019),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("有两个作用\n"),n("ul",[n("li",[t._v("父类禁止自己被继承")]),t._v(" "),n("li",[t._v("虚函数禁止自己被重写")])])])]),t._v(" "),n("h1",{attrs:{id:"_17-decltype"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-decltype"}},[t._v("#")]),t._v(" 17.decltype")]),t._v(" "),n("p",[n("code",[t._v("decltype")]),t._v("可以让编译器找出表达式的类型，虽然之前已经有了"),n("code",[t._v("typeof")]),t._v("，但它并非标准库的一部分，所以 C++ 11 加入了 decltype")]),t._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("map"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" coll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("value_type elem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("ul",[n("li",[t._v("实际当中这两行可能隔得很远。我们知道这个是容器，所以用 value_type 拿到类型，然后用它的 type 声明变量 elem")]),t._v(" "),n("li",[t._v("C++ 11 之前无法通过对象取得 type，你必须知道那个对象是什么类型，要写成"),n("code",[t._v("map<string, float>::value_type elem;")])])]),t._v(" "),n("p",[t._v("三种应用：声明返回类型、模板之间应用（元编程）、求 lambda 表达式类型\n"),n("img",{attrs:{src:a(1020),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("声明一种返回类型")]),t._v(" "),n("li",[t._v("一般"),n("code",[t._v("+")]),t._v("都是作用在两个相同类型之间的，但这里 x 和 y 是两个类型。"),n("code",[t._v("decltype")]),t._v("的作用就体现出来了，它允许我们的返回类型是 x+y 之后的类型。但是这样编译不通过，因为 x 和 y 在后面才出现")]),t._v(" "),n("li",[t._v("于是写成"),n("code",[t._v("autoAdd(T1 x, T2 y) -> decltype(x + y);")]),t._v("，意思一样，但可以通过编译。当然，即使编译通过了，如果用的时候 x 和 y 无法相加，还是会报错")]),t._v(" "),n("li",[t._v("这种指定方式和 lambdas 很像")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1021),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("模板之间的应用")]),t._v(" "),n("li",[t._v("模板之间调来调去之后，如果我想知道 obj 的类型，就可以用"),n("code",[t._v("decltype")])]),t._v(" "),n("li",[t._v("同理，虽然编译可以通过，如果使用者传进来一个没有迭代器的 obj，就会报错")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1022),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("求 lambda 表达式类型")]),t._v(" "),n("li",[t._v("lambda 是一个函数，这个函数用 cmp 表示，如果只是用这个对象很好办，但有时候我们会需要它的类型，我们又不知道，就可以用"),n("code",[t._v("decltype")])])]),t._v(" "),n("h1",{attrs:{id:"_18-lambdas"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-lambdas"}},[t._v("#")]),t._v(" 18.Lambdas")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1023),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("lambda 是函数的定义，lambda 可以用作内联函数，可以被当做一个参数或者一个对象，类似于仿函数。")]),t._v(" "),n("li",[t._v("中括号开头的就是 lambda，大括号内是函数本体，调用的时候直接在后面加小括号即可（注意，这里和前面的概念不同，小括号不是生成临时对象，而是直接调用）")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1024),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("完整形式\n"),n("ul",[n("li",[t._v("[]：lambda 导入器（introducer），看到它就知道是 lambda，取用外部变量")]),t._v(" "),n("li",[t._v("()：参数")]),t._v(" "),n("li",[t._v("mutable：[] 中的导入数据是否可变")]),t._v(" "),n("li",[t._v("throwSpec：抛出异常")]),t._v(" "),n("li",[t._v("retType：返回类型")]),t._v(" "),n("li",[t._v("{}：函数体")])])]),t._v(" "),n("li",[t._v("因为 lambda 的写法是 [] 开始的，所以返回类型写到了后面")]),t._v(" "),n("li",[t._v("mutable、throwSpec、retType 都是可写可不写的，但只要写了三个里的其中一个，就必须也要写上小括号")]),t._v(" "),n("li",[n("code",[t._v("[=, &y]")]),t._v("中"),n("code",[t._v("=")]),t._v("的意思是接收任意外界对象 by value。不是很推荐这种写法，可读性比较差")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1025),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("左边 lambda 和右边是近乎等价的")]),t._v(" "),n("li",[t._v("所以会有如此的输出结果，它变的不是外面的 id，而是传入后的自己的 id。这里是 pass by value")]),t._v(" "),n("li",[t._v("但如果不写 mutable，确实不能"),n("code",[t._v("++id")]),t._v("，可见左右不完全相同")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1026),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("左右都是 pass by value，中间是 pass by reference")]),t._v(" "),n("li",[t._v("中间的变化会影响外界")]),t._v(" "),n("li",[t._v("右框因为没写 mutable，所以不能"),n("code",[t._v("++id")])]),t._v(" "),n("li",[t._v("左下框是可以编译通过的，lambda 可以有静态、非静态数据，也可以 return")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1027),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("① 相当于 ②")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1028),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("如果你需要 lambda 当做排序准则交给 set，就需要用"),n("code",[t._v("decltype()")]),t._v("获取它的类型。你也必须把 cmp（lambda obj）传给"),n("code",[t._v("coll()")]),t._v("的构造函数，否则"),n("code",[t._v("coll()")]),t._v("会调用默认构造函数，不幸的是，lambda 并没有默认构造函数，也没有赋值操作，所以会报错。因此，如果要写排序准则，最好写成仿函数，会更直观。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1029),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("n 是元素，x y 是范围，我希望所有的元素都在 x<n<y 的范围里，把不符合范围的删掉。写成左侧的 lambda 要比右侧的仿函数简洁很多，而且因为 lambda 是 inline，效率也会略高")])]),t._v(" "),n("h1",{attrs:{id:"_19-rvalue-references-右值引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-rvalue-references-右值引用"}},[t._v("#")]),t._v(" 19.Rvalue references（右值引用）")]),t._v(" "),n("p",[t._v("上面都是语言，从这开始进入第二个部分：标准库\n右值引用严格来说算是语言，但它和标准库有关\n"),n("img",{attrs:{src:a(1030),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("帮助解决非必要的拷贝。如果赋值的右侧是个右值，那么左值就可以直接把右值移动（move）过来，而不用重新分配")]),t._v(" "),n("li",[t._v("变量就是左值，不能放在左边的就是右值")]),t._v(" "),n("li",[t._v("例子中"),n("code",[t._v("a")]),t._v("、"),n("code",[t._v("b")]),t._v("都是左值，"),n("code",[t._v("a+b")]),t._v("就是右值，临时对象也是右值（可以理解成临时对象没有名字，没法赋值）")]),t._v(" "),n("li",[t._v("string 和 complex 比较特别，没有遵循定义，不用管它们")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1031),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[n("code",[t._v("&foo")]),t._v("可以，对函数取地址。"),n("code",[t._v("&foo()")]),t._v("不行，因为函数返回的东西是右值，不能对右值取地址。C++ 11 之后就不一样了")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1032),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Vtype(buf)")]),t._v("是临时对象，自然而然是右值")]),t._v(" "),n("li",[t._v("过去"),n("code",[t._v("insert()")]),t._v("为了 copy 会调用这个元素的拷贝构造，现在已经明确自己是可以 move 的了，于是会调用移动构造。前者是深拷贝，后者是浅拷贝。所以右值在 move 之后就不能再用了，不然会有危险")]),t._v(" "),n("li",[t._v("如果我是左值，但我明确我以后不会再用了，也想 move，只要把左值放到"),n("code",[t._v("std::move()")]),t._v("里即可，就能得到左值的右值版本")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1033),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("G2.9 （代表 C++ 11 之前）中 vector 的 insert 只有一个版本，G4.9（代表 C++ 11 之后）则有两个版本")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1034),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("不但有移动构造，也有移动赋值")])]),t._v(" "),n("h1",{attrs:{id:"_20-perfect-forwarding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-perfect-forwarding"}},[t._v("#")]),t._v(" 20.Perfect Forwarding")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1035),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("先看看什么是不完美的传递")]),t._v(" "),n("li",[t._v("两个"),n("code",[t._v("process()")]),t._v("，分别是左值版本和右值版本，通过输出可以知道调用了哪个版本")]),t._v(" "),n("li",[t._v("中介函数"),n("code",[t._v("forward()")]),t._v("，"),n("code",[t._v("forward()")]),t._v("再调用"),n("code",[t._v("process()")]),t._v("。这时候出现了问题，右值经过转交后被当成了左值处理")]),t._v(" "),n("li",[t._v("左值更不用说了，完全不能调用"),n("code",[t._v("forward()")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1036),alt:"image.png"}}),t._v(" "),n("img",{attrs:{src:a(1037),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("标准库中的"),n("code",[t._v("forward()")]),t._v("可以做到完美传递，我们不深究实现细节")])]),t._v(" "),n("h1",{attrs:{id:"_21-move-aware-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-move-aware-class"}},[t._v("#")]),t._v(" 21.move aware class")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1038),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("写一个可以被 move 的 class，作为元素的类型。未来容器需要的时候就可以 move 它而不是拷贝")]),t._v(" "),n("li",[t._v("重点是 move constructor。首先参数是右值引用，然后把指针和长度设过来，注意，清除动作（delete）不应该写在这，而是应该交给析构函数来做。一定要把指针设为 NULL，即把指针打断，析构函数也要检查是不是 NULL，不然会把数据本身杀掉")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1039),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("接上页")]),t._v(" "),n("li",[t._v("移动赋值其他和拷贝赋值都一样，只不过是浅拷贝而不是深拷贝")]),t._v(" "),n("li",[t._v("测试时要把它放到各种容器里，而关联式容器如 set、map 需要检测元素大小，所以也要重载"),n("code",[t._v("<")]),t._v("和"),n("code",[t._v("==")]),t._v("，因为 MyString 是 C 风格字符串，为了方便，借用 C++ 的 String 比大小。不过这部分和 move 无关，只是为了测试。同理，hash table 需要 hash function，所以写了蓝色的部分")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1040),alt:"image.png"}}),t._v(" "),n("img",{attrs:{src:a(1041),alt:"image.png"}}),t._v(" "),n("img",{attrs:{src:a(451),alt:"image.png"}}),t._v(" "),n("img",{attrs:{src:a(452),alt:"image.png"}}),t._v(" "),n("img",{attrs:{src:a(453),alt:"image.png"}}),t._v(" "),n("img",{attrs:{src:a(454),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("与《STL 标准库与泛型编程》中的 9.5 部分相同")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(455),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("为什么 copy 和 move 速度差这么多？")]),t._v(" "),n("li",[t._v("vector 的拷贝构造是真的一个个的把来源端拷贝到目的端。copy 最终的确完成了 memory allocation 及 copy ctor 的调用")]),t._v(" "),n("li",[t._v("顺着箭头走，它最后所做的事只是 swap 来源端和目的端的三根指针。move-copy 最终是三根指针进行 swap()，交换后 c 变成了 c2，而 c2 变成了 c，但 c2 原本无意义，所以现在 c 变得无意义，因此 move-copy 之后的来源端（本例的 c）不能再被使用，否则后果自负")])]),t._v(" "),n("h1",{attrs:{id:"_22-容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-容器"}},[t._v("#")]),t._v(" 22.容器")]),t._v(" "),n("h2",{attrs:{id:"_22-1-array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-1-array"}},[t._v("#")]),t._v(" 22.1 array")]),t._v(" "),n("p",[t._v("与《STL 标准库与泛型编程》中的 6.4 部分相同。本质是数组，给数组容器该有的接口。")]),t._v(" "),n("h2",{attrs:{id:"_22-2-hash-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-2-hash-table"}},[t._v("#")]),t._v(" 22.2 Hash Table")]),t._v(" "),n("h3",{attrs:{id:"_22-2-1-容器-hash-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-2-1-容器-hash-table"}},[t._v("#")]),t._v(" 22.2.1 容器 hash table")]),t._v(" "),n("p",[t._v("与《STL 标准库与泛型编程》中的 6.7.1 部分类似。主要讲了 Separate Chaining（分离链接法）")]),t._v(" "),n("h3",{attrs:{id:"_22-2-2-hash-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-2-2-hash-function"}},[t._v("#")]),t._v(" 22.2.2 hash function")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1042),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("测试基本类型数据的 hash code 怎么取")]),t._v(" "),n("li",[t._v("整数型的数据得到的也是整数型（包括 char）")]),t._v(" "),n("li",[t._v("都是 3.141592653，float 和 double 不一样；都是 Ace，C 的字符串和 C++ 的不一样")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1043),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("G2.9 整形的哈希函数，模板特化，传入什么就返回什么")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1044),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("G2.9 字符串的哈希函数（C 风格的字符串，C++ 的字符串在 G2.9 还没有）")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1045),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("手动计算出的结果与应该落入的桶的编号与观察到的结果相匹配")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1046),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("G4.9 版的哈希函数")]),t._v(" "),n("li",[t._v("针对各种各样的类型做特化")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1047),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("这一页左侧和上一页右侧都是针对整形做特化")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1048),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("针对浮点数做特化，调用"),n("code",[t._v("_Hash_impl::hash()")])]),t._v(" "),n("li",[t._v("根据上一页，"),n("code",[t._v("_Hash_impl::hash()")]),t._v("调用了"),n("code",[t._v("_Hash_bytes()")]),t._v("，但这个函数没有定义，只有声明（可能已经编译成二进制了），所以如何计算浮点数的哈希函数不得而知")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1049),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("functional_hash.h 里并没有字符串相关的哈希函数，很合理，因为字符串应该自己设计自己的哈希函数")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1050),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("字符串的哈希函数，最后也是落到不知道怎么实现的"),n("code",[t._v("_Hash_bytes()")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1051),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[n("code",[t._v("_Hash_bytes()")]),t._v("出现的地方，只有声明，没有定义")])]),t._v(" "),n("p",[t._v("一个万用的哈希函数，该部分没有视频，推断与《STL 标准库与泛型编程》中的 9.1 部分类似。用到了 variadic templates")]),t._v(" "),n("h1",{attrs:{id:"_23-tuple"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23-tuple"}},[t._v("#")]),t._v(" 23.tuple")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1052),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("tuple 源码大家已经很熟悉了（前面的 variadic templates 讲的很透彻了），这里只看用法")]),t._v(" "),n("li",[t._v("与《STL 标准库与泛型编程》中的 9.2 部分相同")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1053),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("在没有 variadic templates 的时候也有 tuple，我们看一下当时的做法")]),t._v(" "),n("li",[n("code",[t._v("GenScatterHiderarchy")]),t._v("其实就是想实现左侧的继承体系，它用 #define 硬写出来，局限在于它写到多少，里面就只能放多少个东西")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1054),alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("boost 里的名字就叫 tuple")]),t._v(" "),n("li",[t._v("概念和上面的差不多，也是硬写出来的，最多写到了针对 15 个的")]),t._v(" "),n("li",[n("code",[t._v("tuple_base")]),t._v("这一页放不开，放在上一页")])]),t._v(" "),n("p",[t._v("其他参考：")]),t._v(" "),n("h1",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),n("h1",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])])])}),[],!1,null,null,null);s.default=e.exports},451:function(t,s,a){t.exports=a.p+"assets/img/1672314355323-9fa36a58-cd57-42f9-9342-3e8f14d3d4f9.f9a61345.png"},452:function(t,s,a){t.exports=a.p+"assets/img/1672314505115-ef1c3323-52fd-4a14-8c32-24d7a6e20cb7.c030d684.png"},453:function(t,s,a){t.exports=a.p+"assets/img/1672314519805-5a23b668-55de-4fd5-9e2d-19be5566ed58.95db14c0.png"},454:function(t,s,a){t.exports=a.p+"assets/img/1672314532277-48a57200-1eda-42bb-9044-12885cb2e563.78c68ce5.png"},455:function(t,s,a){t.exports=a.p+"assets/img/1672316873506-cb634a22-2c4d-4b2d-92ef-dbcb73c1410f.ccc3a34b.png"},999:function(t,s,a){t.exports=a.p+"assets/img/1675248393898-d3acc9f0-25bd-4321-aaf1-5d35c817bd3f.99fe3ccc.png"}}]);